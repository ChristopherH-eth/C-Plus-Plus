// Guessing Game
// Version 1.2
//
// Christopher Hardy
// PRG/410
// March 21st, 2016
// Gholam Ali Shaykhian
//
// Description:
// The Guessing Game Program is designed to allow the user to guess a randomly generated number that has a value between
// one and ten, ensured by a constant value.  The program will tell the user if they have guessed too high, too low, if
// they are out of bounds, or if they are correct.  Upon inputing a correct guess, the user is then prompted to continue
// with a new number, or to simply exit the program.
//
// Version 1.1:
// In Version 1.1, the Guessing Game Program utilizes functions to determine the truth value of the users guess against the
// random numbers generated by the program.  The function reviewGuess is declared through use of a prototype and then
// defined later in the program.  It returns values of -1, 0, 1, or 2 based on the guess of the user versus the random
// number.  Switch blocks are also used to better handle user input.
//
// Version 1.2:
// In Version 1.2, array functionality is added to the Guessing Game program.  The array stores the guesses of the user each
// game, and displays the user's guesses after they either guess the correct number, or reach the maximum number of guesses
// (3).  After each session, the active elements of the array are brought out of bounds, so that if the user guesses the
// correct number on the first guess, the program will only display that guess in the list of previous guesses.

#include "stdafx.h"
#include <iostream>
#include <ctime>
using namespace std;

int reviewGuess(int, int, int); // reviewGuess prototype

int main()
{
	int number, guess, guessCount;
	const int maxNumber = 10, MAX = 3;
	char restart;
	bool RUNNING = true, CHOOSING = true, GUESSING = true;

	int guessArray[MAX];

	srand(time(NULL)); // allows for different random numbers each time the program is opened

	cout << "Welcome to the Guessing Game!\n" << endl;
	cout << "This program will secretly generate a random number between one and ten.  \nYour objective is to see if you" <<
		"can guess that number within three guesses.  \nYou may do this as many times as you'd like." << endl;

	// loop to run program until user exits
	while (RUNNING)
	{
		guessCount = 0;
		RUNNING = true;
		CHOOSING = true;
		GUESSING = true;
		number = rand() % maxNumber + 1; // generates a random number between one and ten

		cout << "\n\nPlease guess a number: ";
		cin >> guess;

		// loop to allow multiple guesses
		while (GUESSING)
		{
			// add guess to array if guess is legal
			if ((guess > 0) && (guess < 11))
			{
				guessArray[guessCount] = guess;
				guessCount++;
			}

			reviewGuess(guess, number, guessCount);

			// switch block to prompt user based on guess result
			switch (reviewGuess(guess, number, guessCount))
			{
				case -1:
					cout << "\nYour guess is too low, please guess again: ";
					cin >> guess;
					break;
				
				case 0:
					cout << "\nCongratulations!  You're correct, the number was " << number << ".";
					GUESSING = false;
					break;
						
				case 1:
					cout << "\nYour guess is too high, please guess again: ";
					cin >> guess;
					break;

				case 2:
					cout << "\nPlease guess a number between one and ten: ";
					cin >> guess;
					break;

				case 3:
					cout << "\nYou've made the maximum number of incorrect guesses.  The correct number was " << number <<
						".";
					GUESSING = false;
					break;

				default:
					break;
			}
		}

		cout << "\n\nYour guesses: " << endl;
		
		// loop to display user guesses
		for (int count = 0; count < MAX; count++)
		{
			if (guessArray[count] > 0)
			{
				cout << "Guess " << count + 1 << ": " << guessArray[count] << endl;
			}
		}

		// loop to reset array
		for (int count = 0; count < MAX; count++)
		{
			guessArray[count] = 0;
		}

		cout << "\nWould you like to guess another number? (Y/N): ";
		cin >> restart;

		// loop to ensure user makes a valid choice
		while (CHOOSING)
		{
			// switch block to give the user the choice to guess another number
			switch (restart)
			{
				case 'Y':
					CHOOSING = false;
					break;
				case 'y':
					CHOOSING = false;
					break;
				case 'N':
					CHOOSING = false;
					RUNNING = false;
					break;
				case 'n':
					CHOOSING = false;
					RUNNING = false;
					break;
				default:
					cout << "\nPlease choose yes (Y) or no (N): ";
					cin >> restart;
					break;
			}
		}
	}

	cout << "\nThank you for playing the guessing game!" << endl;
	system("pause");

    return 0;
}

// function to review the user's guess
int reviewGuess(int guess, int number, int guessCount)
{
	// if, else-if block to check guess values
	if ((guessCount == 3) && (guess != number))
	{
		return 3;
	}

	else if ((guess < number) && (guess > 0))
	{
		return -1;
	}

	else if ((guess > number) && (guess < 11))
	{
		return 1;
	}

	else if ((guess < 1) || (guess > 10))
	{
		return 2;
	}

	else
		return 0;
}

